Problem Link: https://www.hackerrank.com/challenges/picking-numbers/problem

#include <bits/stdc++.h>
using namespace std;
string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);
int pickingNumbers(vector<int> a) 
{
   sort(a.begin(),a.end());
   int temp=a[0];
   int i=0,k=0,ct=1,d=0,e=0;
   vector<int> x;
   for(int i=1;i<a.size();i++)
   {
       d=abs(a[i]-temp);
       e=abs(a[i]-a[i-1]);
      if(d>=2)
      {
        temp=a[i];
        x.push_back(ct);
        ct=1;
      } 
      else if(d<=1 and e<=1)
      {
          ct++;
      }         
   }
   x.push_back(ct);
   temp=*max_element(x.begin(),x.end());
   return temp;
}
int main()
{
    ofstream fout(getenv("OUTPUT_PATH"));

    string n_temp;
    getline(cin, n_temp);

    int n = stoi(ltrim(rtrim(n_temp)));

    string a_temp_temp;
    getline(cin, a_temp_temp);

    vector<string> a_temp = split(rtrim(a_temp_temp));

    vector<int> a(n);

    for (int i = 0; i < n; i++) {
        int a_item = stoi(a_temp[i]);

        a[i] = a_item;
    }

    int result = pickingNumbers(a);

    fout << result << "\n";

    fout.close();

    return 0;
}

string ltrim(const string &str) {
    string s(str);

    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );

    return s;
}

string rtrim(const string &str) {
    string s(str);

    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );

    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;

    string::size_type start = 0;
    string::size_type end = 0;

    while ((end = str.find(" ", start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));

        start = end + 1;
    }

    tokens.push_back(str.substr(start));

    return tokens;
}
